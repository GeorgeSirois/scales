from .core import Scales
from .sink import (
  MessageSinkStackBuilder,
  TransportSinkStackBuilder
)

class BaseBuilder(object):
  """Base builder helper class for Scales services.

  Builder wrap creating a client for a specific service type.
  This includes configuring sinks, setting a timeout, etc.
  """
  DEFAULT_TIMEOUT = 5

  class MessageSinkStackBuilder(MessageSinkStackBuilder):
    def __init__(self): raise NotImplementedError()

  class TransportSinkStackBuilder(TransportSinkStackBuilder):
    def __init__(self): raise NotImplementedError()

  def _GetMessageSinkBuilder(self):
    return self.MessageSinkStackBuilder()

  def _GetTransportSinkBuilder(self):
    return self.TransportSinkStackBuilder()

  def configure(self, Iface):
    """Configure a Scales client for the given interface.

    Args:
      Iface - The interface to build a scales client for.

    Returns:
      A scales builder configured for the service.
    """
    return Scales \
      .newBuilder(Iface) \
      .setMessageSinkBuilder(self._GetMessageSinkBuilder()) \
      .setTransportSinkBuilder(self._GetTransportSinkBuilder())

  @classmethod
  def newClient(cls, Iface, uri, timeout=DEFAULT_TIMEOUT):
    """Create a new client for a Thrift service.

    Args:
      Iface - The Thrift interface (generated by the thrift compiler.)
      uri - The URI of the service.  Uri may be in the form of
            "tcp://host:port,host:port,...", or "zk://host:port/server/set/path".
      timeout - The default call timeout.
    Returns:
      A proxy implementing all thrift methods of Iface.
    """
    return cls().configure(Iface) \
      .setUri(uri) \
      .setTimeout(timeout) \
      .build()
