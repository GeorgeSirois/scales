__author__ = 'steveniemitz'
from thrift.transport import TTransport

from scales.dispatch import MessageDispatcher
from scales.builder import Scales
from scales.thealthysocket import THealthySocket
from scales import thriftmuxsink

_MUXERS = {}
class MuxDispatcherProvider(object):
  class ThriftMuxSocketTransportSinkProvider(object):
    def __init__(self, sock):
      self._sock = sock

    def GetTransportSink(self):
      sock = self._sock
      self._sock = None
      sock.open()
      return thriftmuxsink.ThriftMuxSocketTransportSink(sock)

  @staticmethod
  def AreDispatchersSharable():
    return True

  def GetConnection(self, server, pool_name, health_cb, timeout):
    key = (server, pool_name)
    if key in _MUXERS:
      disp, cbs = _MUXERS[key]
    else:
      sock = THealthySocket(server.host, server.port, None, None, pool_name)
      transport_sink_provider = self.ThriftMuxSocketTransportSinkProvider(sock)
      disp = MessageDispatcher(transport_sink_provider, None, timeout)
      cbs = set()
      _MUXERS[key] = (disp, cbs)

    if health_cb not in cbs:
      cbs.add(health_cb)
      disp.shutdown_result.rawlink(lambda ar: health_cb(server))

    return disp

  def IsConnectionFault(self, e):
    return isinstance(e,  TTransport.TTransportException)


class ThriftMux(object):
  @staticmethod
  def newService(Client, uri):
    """Create a new client for a ThriftMux service.

    Args:
      Client - The plain Thrift client (generated by the thrift compiler.)
      uri - The URI of the service.  Uri may be in the form of
            "tcp://host:port,host:port,...", or "zk://host:port/server/set/path".

    Returns:
      A proxy implementing all thrift methods of Client.
    """
    return Scales \
      .newBuilder(Client) \
      .setDispatcherFactory(MuxDispatcherProvider()) \
      .setUri(uri) \
      .setTimeout(.5) \
      .build()
