from thrift.transport import TTransport
from thrift.transport import TSocket

from scales.thriftmux.sink import (
    ThrfitMuxMessageSerializerSink,
    SocketTransportSink,
    TimeoutSink
)
from scales.core import Scales
from scales.pool import RoundRobinPoolMemberSelector
from scales.varzsocketwrapper import VarzSocketWrapper

class ThriftMux(object):
  """A builder class for building clients to ThriftMux services.
  """

  class SocketTransportSinkProvider(object):
    """"""

    _MUXERS = {}
    @staticmethod
    def AreTransportsSharable():
      return True

    def _CreateSocket(self, host, port):
      return TSocket.TSocket(host, port)

    def GetConnection(self, server, pool_name, health_cb):
      key = (server, pool_name)
      if key in self._MUXERS:
        sink, cbs = self._MUXERS[key]
      else:
        sock = self._CreateSocket(server.host, server.port)
        healthy_sock = VarzSocketWrapper(sock, pool_name)
        sink = SocketTransportSink(healthy_sock, pool_name)
        cbs = set()
        self._MUXERS[key] = (sink, cbs)

      if health_cb not in cbs:
        cbs.add(health_cb)
        sink.shutdown_result.rawlink(lambda ar: health_cb(server))
      return sink

    @staticmethod
    def IsConnectionFault(e):
      return isinstance(e,  TTransport.TTransportException)


  class MessageSinkProvider(object):
    @staticmethod
    def CreateMessageSinks(varz_source):
      return [
        TimeoutSink(varz_source),
        ThrfitMuxMessageSerializerSink(varz_source)
      ]

  @staticmethod
  def configure(Iface, uri):
    return Scales \
      .newBuilder(Iface) \
      .setPoolMemberSelector(RoundRobinPoolMemberSelector()) \
      .setMessageSinkProvider(ThriftMux.MessageSinkProvider()) \
      .setTransportSinkProvider(ThriftMux.SocketTransportSinkProvider()) \
      .setUri(uri) \
      .setTimeout(.5)

  @staticmethod
  def newClient(Iface, uri):
    """Create a new client for a ThriftMux service.

    Args:
      Iface - The Thrift interface (generated by the thrift compiler.)
      uri - The URI of the service.  Uri may be in the form of
            "tcp://host:port,host:port,...", or "zk://host:port/server/set/path".

    Returns:
      A proxy implementing all thrift methods of Iface.
    """
    return ThriftMux.configure(Iface, uri).build()
