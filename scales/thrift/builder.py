from thrift.transport import TTransport
from thrift.transport import TSocket

from .sink import (
  ThriftFormatterSink,
  SocketTransportSink,
)
from ..core import Scales
from ..varzsocketwrapper import VarzSocketWrapper


class Thrift(object):
  class SocketTransportSinkProvider(object):
    @staticmethod
    def AreTransportsSharable():
      return False

    def GetConnection(self, server, pool_name, health_cb):
      sock = TSocket.TSocket(server.host, server.port)
      healthy_sock = VarzSocketWrapper(sock, pool_name)
      sink = SocketTransportSink(healthy_sock, pool_name)

      sink.shutdown_result.rawlink(lambda ar: health_cb(server))
      return sink

    @staticmethod
    def IsConnectionFault(e):
      return isinstance(e,  TTransport.TTransportException)

  class MessageSinkProvider(object):
    @staticmethod
    def CreateMessageSinks(varz_source):
      return [
        ThriftFormatterSink(varz_source)
      ]

  @staticmethod
  def configure(Iface, uri):
    return Scales \
      .newBuilder(Iface) \
      .setMessageSinkProvider(Thrift.MessageSinkProvider()) \
      .setTransportSinkProvider(Thrift.SocketTransportSinkProvider()) \
      .setUri(uri) \
      .setTimeout(.05)

  @staticmethod
  def newClient(Iface, uri):
    """Create a new client for a ThriftMux service.

    Args:
      Iface - The Thrift interface (generated by the thrift compiler.)
      uri - The URI of the service.  Uri may be in the form of
            "tcp://host:port,host:port,...", or "zk://host:port/server/set/path".

    Returns:
      A proxy implementing all thrift methods of Iface.
    """
    return Thrift.configure(Iface, uri).build()
